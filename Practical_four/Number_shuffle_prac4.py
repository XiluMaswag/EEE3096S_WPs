# Import libraries
import RPi.GPIO as GPIO
import random
import ES2EEPROMUtils
import os
import smbus2 as SMBUS
import time

# Global variables 
end_of_game = None # Changes when user quits game or wins
active_game = False # Helps keep up with status of game
current_user = None # Sets current user name
current_guess = 0 # user's guess value
current_value = 0 # guess generated by computer
current_score = 0 # user's score

# Raspberrypi pins used
LED_value = [11, 13, 15]
LED_accuracy = 32
btn_submit = 16
btn_increase = 18
buzzer = 33
eeprom = ES2EEPROMUtils.ES2EEPROM()

# PWM variables
pwm_buzzer = None
pwm_accuracy = None


# Print the game banner (Done)
def welcome():
    os.system('clear')
    print("  _   _                 _                  _____ _            __  __ _")
    print("| \ | |               | |                / ____| |          / _|/ _| |")
    print("|  \| |_   _ _ __ ___ | |__   ___ _ __  | (___ | |__  _   _| |_| |_| | ___ ")
    print("| . ` | | | | '_ ` _ \| '_ \ / _ \ '__|  \___ \| '_ \| | | |  _|  _| |/ _ \\")
    print("| |\  | |_| | | | | | | |_) |  __/ |     ____) | | | | |_| | | | | | |  __/")
    print("|_| \_|\__,_|_| |_| |_|_.__/ \___|_|    |_____/|_| |_|\__,_|_| |_| |_|\___|")
    print("")
    print("Guess the number and immortalise your name in the High Score Hall of Fame!")


# Print the game menu 
def menu():
    global end_of_game
    global active_game
    global current_value
    option = input("Select an option:   H - View High Scores     P - Play Game       Q - Quit\n")
    option = option.upper()
    if option == "H":
        os.system('clear')
        print("HIGH SCORES!!")
        s_count, ss = fetch_scores()
        display_scores(s_count, ss)
    elif option == "P":
        os.system('clear')
        print("Starting a new round!")
        print("Use the buttons on the Pi to make and submit your guess!")
        print("Press and hold the guess button to cancel your game")
        current_value = generate_number()
        while not end_of_game:
            pass
    elif option == "Q":
        print("Come back soon!")
        exit()
    else:
        print("Invalid option. Please select a valid one!")

# Display count (Done-)
def display_scores(count, raw_data):
    # print the scores to the screen in the expected format
    print("There are {} scores. Here are the top 3!".format(count))
    
    # print out the scores in the required format
    for i in range(3):
        print("{1} - {2} took {3} guesses".format(i + 1, raw_data[i][0], raw_data[i][1]))
    pass
    
# Setup Pins (Done-check, callback method)
def setup():
    # Setup board mode
    GPIO.setmode(BOARD)
    
    # global variables to be used
    global pwm_accuracy
    global pwm_buzzer
    global current_guess
    
    # Setup regular GPIO 
    # Inputs
    GPIO.setup(btn_submit, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    GPIO.setup(btn_increase, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    
    #I2C
    #GPIO.setup(3,GPIO.OUT, pull_up_down=GPIO.PUD_UP)
    #GPIO.setup(5,GPIO.OUT, pull_up_down=GPIO.PUD_UP
    # Outputs
    GPIO.setup(LED_value[0], GPIO.OUT, initial=GPIO.LOW)
    GPIO.setup(LED_value[1], GPIO.OUT, initial=GPIO.LOW)
    GPIO.setup(LED_value[2], GPIO.OUT, initial=GPIO.LOW)
    
    GPIO.setup(LED_accuracy, GPIO.OUT, initial=GPIO.LOW)
    GPIO.setup(buzzer, GPIO.OUT, initial=GPIO.LOW)
    
    # Setup PWM channels
    pwm_accuracy =  GPIO.PWM(LED_accuracy, 1000)
    pwm_buzzer =  GPIO.PWM(buzzer,8)
    
    # Setup debouncing and callbacks   
    GPIO.add_event_detect(btn_increase, GPIO.FALLING, callback=btn_increase_cb, bouncetime = 300)
    GPIO.add_event_detect(btn_submit, GPIO.FALLING, callback=btn_submit_cb, bouncetime = 300)
    pass

# Load high scores (Done)
def fetch_scores():
    # Read score count 
    score_count = eeprom.read_block(1,0)[0]
    
    # Get the actual scores
    scores = []
    pre_scores = eeprom.read_block(1,4*score_count)
    
    # convert the codes back to ascii
    for element in range(score_count):
        index = 4*element
        pre_scores[index] = chr(pre_scores[index])
        pre_scores[index+1] = chr(pre_scores[index+1])
        pre_scores[index+2] = chr(pre_scores[index+1])
        acsii = pre_scores[index] + pre_scores[index+1] + pre_scores[index+2]
        scores.append([acsii,pre_scores[3]])
        
    # return back the results
    return score_count, scores

# method for LED lighting control (Done)
def LED_output(number):
    # Conver the number to binary and slice identifier
    bin_number = bin(number)[2:].zfill
    
    # Send control logic signals to each LED -coula change to for loop
    if not((len(bin_number)-2) > 3):
        for i in range(len(bin_number)-2):
            GPIO.output(LED_value[i], int(bin_number[i+2]))
    pass
        
    
    
# Save high scores (Done)
def save_scores():
    # fetch scores
    s_count, scores = fetch_scores()
    # include new score
    scores.append(current_user,current_score)
    # sort
    scores.sort(key=lambda x: x[1])
    # update total amount of scores and write new scores
    new_scores = []
    for each_score in scores:
        for letter in each_score[0]:
            new_scores.append(ord(letter))
        new_scores.append(score[1])
    eeprom.write_block(1, new_scores)
    pass


# Generate guess number (Done)
def generate_number():
    return random.randint(0, pow(2, 3)-1)


# Increase button pressed (Done)
def btn_increase_pressed(channel):
    global current_guess
    global active_game
    # Increase the value shown on the LEDs
    if active_game:
        if current_guess < 7:
            current_guess += 1
            LED_output(current_guess)
        else:
            current_guess = 0
            LED_output(current_guess)
    pass


# Guess button (done)
def btn_guess_pressed(channel):
    global active_game
    global current_guess
    global current_score
    global current_value
    global current_user
    
    # If they've pressed and held the button, clear up the GPIO and take them back to the menu screen
    # Check for button hold (pressing for more than 1s) and send back to menu
    hold = False
    start_time = time.time()
    
    while GPIO.input(channel) == 0:
        if (time.time() - start_time) > 1:
            hold = True
            break
        pass
        
    if hold and active_game:
        cleanup()
        menu()
        active_game = False
        
    # Compare the actual value with the user value displayed on the LEDs
    elif active_game:
        current_score += 1
        if(current_value - current_guess == 0):
            cleanup()
            active_game = False
            # - tell the user and prompt them for a name
            print("Great, You WIN!!! You scored {}\n".format(current_score))
            current_user = input("Enter your name for a spot pn the Champs list:  ")
            # Everything to do with scores
            save_scores()
            os.system('clear')
            menu()
    else:
        trigger_buzzer()
        accuracy_leds()
    # Change the PWM LED
    # if it's close enough, adjust the buzzer
    # if it's an exact guess:
    # - Disable LEDs and Buzzer
    # - tell the user and prompt them for a name
    # - fetch all the scores
    # - add the new score
    # - sort the scores
    # - Store the scores back to the EEPROM, being sure to update the score count
    pass


# LED Brightness (Done)
def accuracy_leds():
    # Set the brightness of the LED based on how close the guess is to the answer
    # - The % brightness should be directly proportional to the % "closeness"
    # - For example if the answer is 6 and a user guesses 4, the brightness should be at 4/6*100 = 66%
    # - If they guessed 7, the brightness would be at ((8-7)/(8-6)*100 = 50%
    global pwm_accuracy
    global current_value
    global current_guess
    #Define function for brightness/contrast
    contrast = ((7 - abs(current_guess - current_value))/7)*100
        
    if contrast == 0:
        pwm_accuracy.stop()
    else:
        pwm_accuracy.start(contrast)
    pass

# Sound Buzzer (Done)
def trigger_buzzer():
    # The buzzer operates differently from the LED
    # While we want the brightness of the LED to change(duty cycle), we want the frequency of the buzzer to change
    # The buzzer duty cycle should be left at 50%
    # If the user is off by an absolute value of 3, the buzzer should sound once every second
    # If the user is off by an absolute value of 2, the buzzer should sound twice every second
    # If the user is off by an absolute value of 1, the buzzer should sound 4 times a second
    global pwm_buzzer
    global current_guess
    global current_value
    
    buzz_frequency = abs(current_guess - current_value)
    
    # Trigger buzzer at specified frequency for guess correctness
    if buzz_frequency == 1:
        pwm_buzzer.stop()
        pwm_buzzer.ChangeFrequency(4)
        pwm_buzzer.start(0.5)
    elif buzz_frequency == 2:
        pwm_buzzer.stop()
        pwm_buzzer.ChangeFrequency(2)
        pwm_buzzer.start(0.5)
    elif buzz_frequency == 3:
        pwm_buzzer.stop()
        pwm_buzzer.ChangeFrequency(1)
        pwm_buzzer.start(0.5)
    else:
        pwm_buzzer.stop()
        
    pass

# Cleaning module
def cleanup():
    GPIO.remove_event_detect(btn_submit)
    GPIO.remove_event_detect(btn_increase)
    GPIO.cleanup()
    
if __name__ == "__main__":
    try:
        # Call setup function
        setup()
        welcome()
        while True:
            menu()
            pass
    except Exception as e:
        print(e)
    finally:
        GPIO.cleanup()
